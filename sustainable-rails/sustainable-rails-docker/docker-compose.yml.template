services:
  # This is the name of the container where our code
  # is going to run. The key can be anything. Note that this
  # key will be the name of this image on the network that docker-compose
  # creates, so make it explicit and obvious.
  %REPO%:
    # This is the image where our app runs. image: is a keyword. The value
    # is the name of a Docker image, and likely in the format ACCOUNT/REPO:TAG
    image: %ACCOUNT%/%REPO%:%TAG%
    # This tells Docker what to do when starting up. In the case of our app, we don't
    # want it to pull from a registry unless it's not here.
    pull_policy: "missing"

    # This says that our app should not start up until the DB and Redis instances
    # are up.  Ideally we'd use "service_healthy" which says to wait for the services to
    # pass a health check, but neither Postgres nor Redis docker images configure one.
    # So, we'll use "service_started" instead. Note that the keys inside depends_on:
    # must match the service names used after our app's stanza below, i.e. db: and redis:
    depends_on:
      db:
        condition: "service_started"
      redis:
        condition: "service_started"

    # The Docker documentation is unclear as to what this does, but it seems to speed up
    # shutdown of the overall system.
    init: true
    # This maps the port we've exposed from inside
    # the Docker container to the given local
    # port on our host, i.e. requests to our
    # localhost for LOCAL_PORT will be served
    # by whatever is running in the container on EXPOSE
    ports:
      - "%LOCAL_PORT%:%EXPOSE%"
      - "22:22"

    # This maps the WORKDIR directory inside the Docker
    # container to our hosts directory, VOLUME_SOURCE
    # which is what allows us to share files between
    # our computer and the Docker container.
    #
    # The "delegated" consistency should make disk access faster
    # on macOS. This will cache reads and writes making the container
    # authoritative, so your computer will be behind, but not by much
    volumes:
      - type: bind
        source: "%VOLUME_SOURCE%"
        target: "%WORKDIR%"
        consistency: "delegated"
    entrypoint: /root/docker-entrypoint.sh
  # This creates a SECOND container
  # called "db" that will run Postgres.
  # This value here (db) will be the name
  # of the computer from the perspective of
  # the other Docker container, meaning
  # if we want to make a DB connection
  # to the Postgres running here, we'd
  # use the hostname db to do it
  db:
    # This is the name of the image
    # to run, and in this case, the image
    # will be fetched from DockerHub.
    # If you go to https://hub.docker.com/_/postgres
    # You can see how this works.
    # The "postgres" part tells Docker
    # to look in the postgres "docker repo".
    #
    # The 15 part is the "tag" inside that 
    # repo, representing the image to fetch.
    # Fortunately, it's the same as the version
    # of Postgres we want.
    #
    # If you scroll down to the section titled
    # "Supported tagsâ€¦", you'll see
    # the 13 tag and you can click through
    # to see the Dockerfile that built the image.
    #
    # Lastly, if you scroll down to the part 
    # titled "Environment Variables", you
    # can see the default values for
    # connecting to postgres.
    image: arm64v8/postgres:15
    # We don't want to pull this big image every time
    pull_policy: "missing"
    # In Postgres 15, there is no default value for the password.
    # Since we're using this for dev, we need to set it
    # and it doesn't matter if it's 'secure', so we'll use
    # "postgres" as the password
    environment:
      POSTGRES_PASSWORD: postgres
  # Here, we set up Redis which we don't need to use in the book
  # until we start talking about background jobs.  Like the
  # Postgres block above, this starts up a Redis server using 6.x.x
  redis:
    image: arm64v8/redis:6
    # We don't want to pull this big image every time
    pull_policy: "missing"
# vim: ft=yaml nospell
